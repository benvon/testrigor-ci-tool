---
name: PR Quality Checks

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version
        id: go-version
        run: |
          echo "version=$(grep '^go ' go.mod | cut -d' ' -f2)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Check Go formatting
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not properly formatted:"
            echo "$unformatted"
            exit 1
          fi

      - name: Check Go imports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          unformatted=$(goimports -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files have incorrect imports:"
            echo "$unformatted"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run go mod tidy check
        run: |
          go mod tidy
          if [ -n "$(git diff --name-only)" ]; then
            echo "go mod tidy resulted in changes"
            git diff
            exit 1
          fi

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --verbose
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Security Check
        run: |
          go install github.com/securecodewarrior/go-crypto-auditor@latest
          go list -json -m all | go-crypto-auditor

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version
        id: go-version
        run: |
          echo "version=$(grep '^go ' go.mod | cut -d' ' -f2)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          mkdir -p coverage
          go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html
          go tool cover -func=coverage/coverage.out

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Test coverage: ${COVERAGE}%"
          echo "$COVERAGE" | awk '{if ($1 < 70) {exit 1}}' || { 
            echo "Test coverage is below 70%"; 
            exit 1; 
          }

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version
        id: go-version
        run: |
          echo "version=$(grep '^go ' go.mod | cut -d' ' -f2)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Build application
        run: make build

      - name: Verify binary
        run: |
          ./bin/testrigor-ci-tool --version
          if [ $? -ne 0 ]; then
            echo "Binary verification failed"
            exit 1
          fi

